getComics:
  handler: index.handler
  memorySize: 128
  iamRoleStatementsName: ${self:service}-${self:provider.stage}-get-comics-s3-permission
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:getObject
      Resource:
        - arn:aws:s3:::marvel-keys/*
  events:
    - http:
        path: marvel/comics
        integration: lambda-proxy
        method: get
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
getComicsById:
  handler: index.handler
  memorySize: 128
  iamRoleStatementsName: ${self:service}-${self:provider.stage}-get-comics-by-id-s3-permission
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:getObject
      Resource:
        - arn:aws:s3:::marvel-keys/*
  events:
    - http:
        path: marvel/comics/{comicId}
        integration: lambda-proxy
        method: get
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
createUser:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: users/create
        integration: lambda-proxy
        method: post
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
getUserById:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: users/{userId}
        integration: lambda-proxy
        method: get
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
updateUserStatus:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: users/update-user-status/{userId}
        integration: lambda-proxy
        method: patch
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
updateUserData:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: users/update/{userId}
        integration: lambda-proxy
        method: put
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
login:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: login
        integration: lambda-proxy
        method: post
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
logout:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: logout
        integration: lambda-proxy
        method: post
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
createFavorite:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: favorites/create/{userId}
        integration: lambda-proxy
        method: post
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
updateFavoriteStatus:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: favorites/deactivate/{favId}
        integration: lambda-proxy
        method: put
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
getFavorites:
  handler: index.handler
  memorySize: 128
  events:
    - http:
        path: favorites/{userId}
        integration: lambda-proxy
        method: get
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Cache-Control
            - Access-Control-Allow-Origin
            - Access-Control-Allow-Credentials
            - Access-Control-Allow-Headers
          allowCredentials: false
        private: ${self:custom.PRIVATE_HTTP.${self:provider.stage}}
